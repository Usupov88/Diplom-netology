
#Область ОбработчикиСобытийМодуляОбъекта

  Процедура ОбработкаПроведения(Отказ, Режим)
	
   	СформироватьДвижениеДокумента();
	РасчитатьОклад();
	РасчитатьОтпуск();
	Удержание();
	СформироватьСторноЗаписи();
	СформироватьВзаиморасчётыССотрудниками();
	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыФункции

Процедура СформироватьДвижениеДокумента()
	
	Движения.ВКМ_ОсновныеНачисления.Записывать = Истина;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления.ВидРасчёта КАК ВидРасчёта,
		|	ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления.ГрафикРаботы КАК ГрафикРаботы,
		|	ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления.ДатаНачала КАК ДатаНачала,
		|	ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления.ДатаОкончания КАК ДатаОкончания
		|ПОМЕСТИТЬ ВТ_ДанныеДокумента
		|ИЗ
		|	Документ.ВКМ_НачисленияЗарплаты.ВКМ_ОсновныеНачисления КАК ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_НачисленияЗарплатыВКМ_ОсновныеНачисления.Ссылка = &Ссылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Оклад КАК Оклад,
		|	ВТ_ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ВТ_ДанныеДокумента.ВидРасчёта КАК ВидРасчёта,
		|	ВТ_ДанныеДокумента.ГрафикРаботы КАК ГрафикРаботы,
		|	ВТ_ДанныеДокумента.ДатаНачала КАК ДатаНачала,
		|	ВТ_ДанныеДокумента.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
		|				&Период,
		|				ВКМ_Сотрудник В
		|					(ВЫБРАТЬ
		|						ВТ_ДанныеДокумента.Сотрудник КАК Сотрудник
		|					ИЗ
		|						ВТ_ДанныеДокумента КАК ВТ_ДанныеДокумента)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
		|		ПО ВТ_ДанныеДокумента.Сотрудник = ВКМ_УсловияОплатыСотрудниковСрезПоследних.ВКМ_Сотрудник";
	
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// регистр ВКМ_ОсновныеНачисления 
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		Движение.Сторно = Ложь;
		Движение.ВидРасчета = Выборка.ВидРасчёта;
		Движение.ПериодДействияНачало = Выборка.ДатаНачала;
		Движение.ПериодДействияКонец = КонецДня(Выборка.ДатаОкончания);
		Движение.БазовыйПериодНачало =  Выборка.ДатаНачала;
		Движение.БазовыйПериодКонец = КонецДня(Выборка.ДатаОкончания); 
		Движение.ПериодРегистрации = Дата;
		Движение.ВКМ_Сотрудник = Выборка.Сотрудник;
		Движение.ВКМ_ГрафикРаботы = Выборка.ГрафикРаботы;
		Движение.Показатель = Выборка.Оклад; 
		
		Если Движение.ВидРасчета = ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск Тогда
			Движение.БазовыйПериодНачало = НачалоМесяца(ДобавитьМесяц(Движение.ПериодДействияНачало, -12));
			Движение.БазовыйПериодКонец = КонецМесяца(ДобавитьМесяц(Движение.БазовыйПериодНачало, 11)); 
		КонецЕсли;
		
	КонецЦикла; 
	
	Движения.ВКМ_ОсновныеНачисления.Записать();
	  
КонецПроцедуры

Процедура СформироватьСторноЗаписи()
	
	СторноЗаписи = Движения.ВКМ_ОсновныеНачисления.ПолучитьДополнение();
	
	Для Каждого Запись Из СторноЗаписи Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, Запись);
		Движение.ПериодРегистрации = Дата;
		Движение.ПериодДействияНачало = Запись.ПериодДействияНачалоСторно;
		Движение.ПериодДействияКонец = Запись.ПериодДействияКонецСторно;
		Движение.Сторно = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура РасчитатьОклад()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК ВКМ_ВсегоДней,
	|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК ВКМ_ОтработаноДней
	|ИЗ
	|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
	|			ВидРасчета = &Оклад
	|				И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика";
	
	Запрос.УстановитьПараметр("Оклад", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Оклад);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.ВКМ_Сумма = ?(Выборка.ВКМ_ВсегоДней = 0, 0,
		                             Движение.Показатель * Выборка.ВКМ_ОтработаноДней / Выборка.ВКМ_ВсегоДней); 
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
		//Формирование сторно записи
		Если Движение.Сторно Тогда
			Движение.ВКМ_Сумма = - Движение.ВКМ_Сумма;
		КонецЕсли; 
	КонецЦикла;	 		
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина); 
		
КонецПроцедуры

Процедура РасчитатьОтпуск()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.ВКМ_СуммаБаза, 0) КАК ВКМ_СуммаБаза,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеПериодДействия, 0) КАК ВКМ_ВсегоДней,
		|	ЕСТЬNULL(ВКМ_ОсновныеНачисленияДанныеГрафика.ЗначениеФактическийПериодДействия, 0) КАК ВКМ_ОтработаноДней,
		|	ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления.ДанныеГрафика(
		|			ВидРасчета = &Отпуск
		|				И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияДанныеГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ВКМ_ОсновныеНачисления.БазаВКМ_ОсновныеНачисления(
		|				&Измерение,
		|				&Измерение,
		|				,
		|				ВидРасчета = &Отпуск
		|					И Регистратор = &Ссылка) КАК ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления
		|		ПО ВКМ_ОсновныеНачисленияДанныеГрафика.НомерСтроки = ВКМ_ОсновныеНачисленияБазаВКМ_ОсновныеНачисления.НомерСтроки";
	
	Запрос.УстановитьПараметр("Отпуск", ПланыВидовРасчета.ВКМ_ОсновныеНачисления.Отпуск);
	Запрос.УстановитьПараметр("Ссылка", Ссылка); 
	
	Измерение = Новый Массив;
	Измерение.Добавить("ВКМ_Сотрудник");
	
	Запрос.УстановитьПараметр("Измерение", Измерение);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Движение = Движения.ВКМ_ОсновныеНачисления[Выборка.НомерСтроки - 1];
		Движение.ВКМ_Сумма = ?(Выборка.ВКМ_ВсегоДней = 0, 0,
		                           Выборка.ВКМ_СуммаБаза / Выборка.ВКМ_ВсегоДней * Выборка.ВКМ_ОтработаноДней); 
		ЗаполнитьЗначенияСвойств(Движение, Выборка);
		
		//Формирование сторно записи
		Если Движение.Сторно Тогда
			Движение.ВКМ_Сумма = - Движение.ВКМ_Сумма;
		КонецЕсли; 	
	КонецЦикла;
	
	Движения.ВКМ_ОсновныеНачисления.Записать(, Истина);
КонецПроцедуры

Процедура Удержание()
	
	Движения.ВКМ_Удержания.Записывать = Истина;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОсновныеНачисления.ВКМ_Сотрудник КАК ВКМ_Сотрудник,
		|	ВКМ_ОсновныеНачисления.ВКМ_Сумма КАК ВКМ_Сумма,
		|	ВКМ_ОсновныеНачисления.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	РегистрРасчета.ВКМ_ОсновныеНачисления КАК ВКМ_ОсновныеНачисления
		|ГДЕ
		|	ВКМ_ОсновныеНачисления.Регистратор = &Регистратор";
	Запрос.УстановитьПараметр("Регистратор", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();	
	Выборка = РезультатЗапроса.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Запись = Движения.ВКМ_Удержания.Добавить();
		Запись.ВКМ_Сотрудник = Выборка.ВКМ_Сотрудник;
		Запись.ВидРасчета = ПланыВидовРасчета.ВКМ_Удержания.НДФЛ;
		Запись.ПериодРегистрации = Дата;
		Запись.ВКМ_Сумма = (Выборка.ВКМ_Сумма * 13) / 100;
		
	КонецЦикла;
	
      Движения.ВКМ_Удержания.Записать();
	  
  КонецПроцедуры

Процедура СформироватьВзаиморасчётыССотрудниками()
	  
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записывать = Истина;
	
	Для Каждого Строка Из ВКМ_ОсновныеНачисления Цикл
		Сумма = ВКМ_РасчетПоВзаиморасчетам.ЗП_ПоВзаиморасчетам(Ссылка);
		Если Сумма > 0 Тогда
			Движение = Движения.ВКМ_ВзаиморасчетыССотрудниками.Добавить();
			Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
			Движение.Период = Дата;
			Движение.Регистратор = Ссылка;
			Движение.ВКМ_Сотрудник = Строка.Сотрудник;
			Движение.ВКМ_Сумма = Сумма;
		КонецЕсли;
		
	КонецЦикла; 
	
	Движения.ВКМ_ВзаиморасчетыССотрудниками.Записать(); 
	  
  КонецПроцедуры

#КонецОбласти

