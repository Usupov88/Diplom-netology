#Область ОбработчикиСобытийМодуляОбъекта

 Процедура ОбработкаПроведения(Отказ, Режим)
	  
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеКлиентуРаботы.Записать();
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина;
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст ="ВЫБРАТЬ
	              |	РАЗНОСТЬДАТ(ВКМ_ОбслуживаниеКлиентов.ВКМ_ВремяС, ВКМ_ОбслуживаниеКлиентов.ВКМ_По, ЧАС) КАК Время,
	              |	ВКМ_ОбслуживаниеКлиентов.ВКМ_Специалист КАК ВКМ_Специалист,
	              |	ЕСТЬNULL(ДоговорыКонтрагентов.ВКМ_СтоимостьЧаса, 0) КАК СтоимостьЧаса
	              |ПОМЕСТИТЬ ВременнаяТаблицаДокумента
	              |ИЗ
	              |	Документ.ВКМ_ОбслуживаниеКлиентов КАК ВКМ_ОбслуживаниеКлиентов
	              |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	              |		ПО ВКМ_ОбслуживаниеКлиентов.ВКМ_Договор = ДоговорыКонтрагентов.Ссылка
	              |ГДЕ
	              |	ВКМ_ОбслуживаниеКлиентов.Дата МЕЖДУ ДоговорыКонтрагентов.ВКМ_НачалоС И ДоговорыКонтрагентов.ВКМ_По
	              |	И ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание)
	              |	И ВКМ_ОбслуживаниеКлиентов.Ссылка = &Ссылка
	              |
	              |ИНДЕКСИРОВАТЬ ПО
	              |	ВКМ_ОбслуживаниеКлиентов.ВКМ_Специалист
	              |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |ВЫБРАТЬ
	              |	ЕСТЬNULL(ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот, 0) КАК ПроцентОтРабот,
	              |	ВременнаяТаблицаДокумента.Время КАК Время,
	              |	ВременнаяТаблицаДокумента.СтоимостьЧаса КАК СтоимостьЧаса
	              |ИЗ
	              |	ВременнаяТаблицаДокумента КАК ВременнаяТаблицаДокумента
	              |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(
	              |				&ДатаДокумента,
	              |				ВКМ_Сотрудник В
	              |					(ВЫБРАТЬ
	              |						ВременнаяТаблицаДокумента.ВКМ_Специалист КАК ВКМ_Специалист
	              |					ИЗ
	              |						ВременнаяТаблицаДокумента КАК ВременнаяТаблицаДокумента)) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	              |		ПО ВременнаяТаблицаДокумента.ВКМ_Специалист = ВКМ_УсловияОплатыСотрудниковСрезПоследних.ВКМ_Сотрудник";
		
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаДокумента", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		// регистр накопления - ВКМ_ВыполненныеКлиентуРаботы
		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
		Движение.ВидДвижения = ВидДвиженияНакопления.Приход;
		Движение.Период = Дата;
		Движение.ВКМ_Клиент = ВКМ_Клиент;
		Движение.ВКМ_Договор = ВКМ_Договор;
		Движение.ВКМ_КоличествоЧасов = Выборка.Время;
		Движение.ВКМ_СуммаКОплате = Движение.ВКМ_КоличествоЧасов * Выборка.СтоимостьЧаса; 
		
		// регистр накопления - ВКМ_ВыполненныеСотрудникомРаботы	  	
		Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить();
		Движение.Период = Дата; 
		Движение.ВКМ_Сотрудник = ВКМ_Специалист;
		Движение.ВКМ_ЧасовКОплате = Выборка.Время;
		Движение.ВКМ_СуммаКОплате = Движение.ВКМ_ЧасовКОплате * Выборка.СтоимостьЧаса * Выборка.ПроцентОтРабот / 100;
		
	КонецЦикла;   
	   
КонецПроцедуры            

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("ВКМ_Сотрудник", ВКМ_Специалист);
	
	// Получение процента для сотрудника на указанную дату
	ПроцентОтРабот = РегистрыСведений.ВКМ_УсловияОплатыСотрудников.
	                        ПолучитьПоследнее(Дата, СтруктураДокумента).ПроцентОтРабот;
	
	Если Не ЗначениеЗаполнено(ПроцентОтРабот) Тогда
		Сообщить(СтрШаблон("У сотрудника %1 не установлен процент оплаты от работ на указанную дату %2",
		                                            ВКМ_Специалист, Дата));
		Отказ = Истина;
	Иначе
		Отказ = Ложь;
	КонецЕсли;
	
	
	// Уведомления об изменениях в справочник ВКМ_Уведомление_TG_Боту
	Если ЭтоНовый()Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбИзменении = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, 
	                              "Дата,ВКМ_Специалист,ВКМ_По,ВКМ_ВремяС", Истина);
	ВКМ_Дата_Документа = СообщениеОбИзменении.Дата;
	ВКМ_Специалист_Документа = СообщениеОбИзменении.ВКМ_Специалист;
	ВКМ_ВремяОкончанияРабот_Документа = СообщениеОбИзменении.ВКМ_По;
	ВКМ_ВремяНачалаРабот_Документа = СообщениеОбИзменении.ВКМ_ВремяС;
	
	Если Дата <> ВКМ_Дата_Документа Тогда
		ТекстСообщения = СтрШаблон("Изменения в документе обслуживание клиентов: 'ВКМ_Дата', %1", Формат(Дата));
	КонецЕсли;
	
	Если ВКМ_ВремяС <> ВКМ_ВремяНачалаРабот_Документа Тогда
		ТекстСообщения = СтрШаблон( "Изменения в документе обслуживание клиентов: 'ВКМ_ВремяНачалаРабот',%1 ", 
		                                                               Формат(ВКМ_ВремяС,"ДЛФ=T"));
	КонецЕсли;
	
	Если ВКМ_По <> ВКМ_ВремяОкончанияРабот_Документа Тогда
		ТекстСообщения = СтрШаблон("Изменения в документе обслуживание клиентов: 'ВКМ_ВремяОкончанияРабот', %1",
		                                                          Формат(ВКМ_По,"ДЛФ=T"));
	КонецЕсли;
	
	Если ВКМ_Специалист <> ВКМ_Специалист_Документа Тогда
		ТекстСообщения = СтрШаблон("Изменения в документе обслуживание клиентов: 'ВКМ_Специалист', %1", 
		                                                                       Строка(ВКМ_Специалист));
	КонецЕсли;
	
	// Добавляем сообщение в справочник ВКМ_Уведомление_TG_Боту
	НовоеУведомление = Справочники.ВКМ_Уведомление_TG_Боту.СоздатьЭлемент();
	НовоеУведомление.Текст = ТекстСообщения;	
	НовоеУведомление.Записать();	
   
КонецПроцедуры

#КонецОбласти
